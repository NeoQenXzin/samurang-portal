# 	-----------------------------------------
# Variables
DC = docker-compose --env-file .env.docker -f docker-compose.yml
# Entrer le mot de passe de la base de donn√©es
passdb = [your-password-database]


# Installation compl√®te de l'application (premi√®re installation)
install: 
	@echo "üöÄ Installation compl√®te de l'application..."
	$(DC) build
	$(DC) up -d
	@echo "üì¶ Installation des d√©pendances PHP..."
	$(DC) exec app composer install
	@echo "üóÑÔ∏è Configuration de la base de donn√©es..."
	$(DC) exec app php bin/console doctrine:migrations:migrate --no-interaction
	@echo "‚úÖ Installation termin√©e avec succ√®s !"

# D√©marrer l'application (tous les services)
start:
	@echo "üöÄ D√©marrage de l'application..."
	$(DC) up -d
	@echo "‚úÖ Application d√©marr√©e - API: http://localhost:8000 | React: http://localhost:3000"

# Arr√™ter l'application (conserve les donn√©es)
stop:
	@echo "üõë Arr√™t de l'application..."
	$(DC) stop
	@echo "‚úÖ Application arr√™t√©e."

# Red√©marrer l'application
restart: stop start
	@echo "üîÑ Application red√©marr√©e avec succ√®s."

# Supprimer compl√®tement l'application (containers, volumes, images)
destroy:
	@echo "‚ö†Ô∏è Suppression compl√®te de l'application..."
	$(DC) down -v --rmi all
	docker system prune -af
	@echo "üßπ Nettoyage des d√©pendances Node..."
	rm -rf frontend/node_modules
	@echo "‚úÖ Application supprim√©e."

# Recr√©er la base de donn√©es (ATTENTION: supprime toutes les donn√©es)
recreate-db:
	@echo "‚ö†Ô∏è Recr√©ation de la base de donn√©es..."
	$(DC) stop database
	$(DC) rm -f database
	docker volume rm $$(docker volume ls -q | grep database_data) || true
	$(DC) up -d database
	sleep 5
	$(DC) exec app php bin/console doctrine:migrations:migrate --no-interaction
	@echo "‚úÖ Base de donn√©es recr√©√©e avec succ√®s."

# Se connecter √† la base de donn√©es
db-connect:
	docker-compose exec database psql -U $(passdb) -d samurang-portal-db

# Sauvegarder la base de donn√©es
db-backup:
	@echo "üì¶ Sauvegarde de la base de donn√©es..."
	@mkdir -p ./backups
	$(DC) exec database pg_dump -U $(passdb) samurang-portal-db > ./backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Sauvegarde termin√©e."

# Restaurer la base de donn√©es depuis une sauvegarde
db-restore:
	@if [ -z "$(file)" ]; then \
		echo "‚ö†Ô∏è Erreur: Sp√©cifiez le fichier de sauvegarde avec file=chemin_du_fichier"; \
		exit 1; \
	fi
	@echo "üîÑ Restauration de la base de donn√©es..."
	$(DC) exec -T database psql -U $(passdb) samurang-portal-db < $(file)
	@echo "‚úÖ Restauration termin√©e."

# Afficher les logs des conteneurs
logs:
	$(DC) logs -f

# Afficher le statut des conteneurs
status:
	$(DC) ps

# Afficher le statut complet (Docker + React)
status-all: status
	@echo "\nStatut du serveur React:"
	@if [ -f ./frontend/.react-pid ] && kill -0 `cat ./frontend/.react-pid` 2>/dev/null; then \
		echo "React server is running (PID: `cat ./frontend/.react-pid`)"; \
	else \
		echo "React server is not running"; \
	fi

# Ajouter, commit et push Git
git-add-commit-push:
	@read -p "Entrez le message de commit : " msg; \
	git add . && \
	git commit -m "$$msg" && \
	git push
	@echo "Modifications pouss√©es vers le d√©p√¥t Git avec succ√®s !"

# lancer mailhog pour tester les emails
mailhog:
	docker run -d -p 1025:1025 -p 8025:8025 mailhog/mailhog
	@echo "Mailhog d√©marr√© - Acc√©der √† l'interface web √† http://localhost:8025"

# lancer messenger pour tester les emails
messenger:
	symfony console messenger:consume async -vv
	@echo "Messenger d√©marr√© - Consommation des messages en attente"


.PHONY: install start stop restart destroy recreate-db db-connect db-backup db-restore logs status status-all git-add-commit-push mailhog messenger